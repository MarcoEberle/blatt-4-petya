// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: BookingService.proto

package BookingService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BookingService service

type BookingService interface {
	CreateBooking(ctx context.Context, in *CreateBookingMessage, opts ...client.CallOption) (*CreateBookingResponse, error)
	ConfirmBooking(ctx context.Context, in *ConfirmBookingMessage, opts ...client.CallOption) (*ConfirmBookingResponse, error)
	DeleteBooking(ctx context.Context, in *DeleteBookingMessage, opts ...client.CallOption) (*DeleteBookingResponse, error)
	GetUserBookings(ctx context.Context, in *GetUserBookingsMessage, opts ...client.CallOption) (*GetUserBookingsResponse, error)
	GetBooking(ctx context.Context, in *GetBookingMessage, opts ...client.CallOption) (*GetBookingResponse, error)
	KillBookingsUser(ctx context.Context, in *KillBookingsUserMessage, opts ...client.CallOption) (*KillBookingsUserResponse, error)
	KillBookingsShow(ctx context.Context, in *KillBookingsShowMessage, opts ...client.CallOption) (*KillBookingsShowResponse, error)
}

type bookingService struct {
	c    client.Client
	name string
}

func NewBookingService(name string, c client.Client) BookingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "bookingservice"
	}
	return &bookingService{
		c:    c,
		name: name,
	}
}

func (c *bookingService) CreateBooking(ctx context.Context, in *CreateBookingMessage, opts ...client.CallOption) (*CreateBookingResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.CreateBooking", in)
	out := new(CreateBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) ConfirmBooking(ctx context.Context, in *ConfirmBookingMessage, opts ...client.CallOption) (*ConfirmBookingResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.ConfirmBooking", in)
	out := new(ConfirmBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) DeleteBooking(ctx context.Context, in *DeleteBookingMessage, opts ...client.CallOption) (*DeleteBookingResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.DeleteBooking", in)
	out := new(DeleteBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) GetUserBookings(ctx context.Context, in *GetUserBookingsMessage, opts ...client.CallOption) (*GetUserBookingsResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.GetUserBookings", in)
	out := new(GetUserBookingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) GetBooking(ctx context.Context, in *GetBookingMessage, opts ...client.CallOption) (*GetBookingResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.GetBooking", in)
	out := new(GetBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) KillBookingsUser(ctx context.Context, in *KillBookingsUserMessage, opts ...client.CallOption) (*KillBookingsUserResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.KillBookingsUser", in)
	out := new(KillBookingsUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingService) KillBookingsShow(ctx context.Context, in *KillBookingsShowMessage, opts ...client.CallOption) (*KillBookingsShowResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.KillBookingsShow", in)
	out := new(KillBookingsShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookingService service

type BookingServiceHandler interface {
	CreateBooking(context.Context, *CreateBookingMessage, *CreateBookingResponse) error
	ConfirmBooking(context.Context, *ConfirmBookingMessage, *ConfirmBookingResponse) error
	DeleteBooking(context.Context, *DeleteBookingMessage, *DeleteBookingResponse) error
	GetUserBookings(context.Context, *GetUserBookingsMessage, *GetUserBookingsResponse) error
	GetBooking(context.Context, *GetBookingMessage, *GetBookingResponse) error
	KillBookingsUser(context.Context, *KillBookingsUserMessage, *KillBookingsUserResponse) error
	KillBookingsShow(context.Context, *KillBookingsShowMessage, *KillBookingsShowResponse) error
}

func RegisterBookingServiceHandler(s server.Server, hdlr BookingServiceHandler, opts ...server.HandlerOption) error {
	type bookingService interface {
		CreateBooking(ctx context.Context, in *CreateBookingMessage, out *CreateBookingResponse) error
		ConfirmBooking(ctx context.Context, in *ConfirmBookingMessage, out *ConfirmBookingResponse) error
		DeleteBooking(ctx context.Context, in *DeleteBookingMessage, out *DeleteBookingResponse) error
		GetUserBookings(ctx context.Context, in *GetUserBookingsMessage, out *GetUserBookingsResponse) error
		GetBooking(ctx context.Context, in *GetBookingMessage, out *GetBookingResponse) error
		KillBookingsUser(ctx context.Context, in *KillBookingsUserMessage, out *KillBookingsUserResponse) error
		KillBookingsShow(ctx context.Context, in *KillBookingsShowMessage, out *KillBookingsShowResponse) error
	}
	type BookingService struct {
		bookingService
	}
	h := &bookingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BookingService{h}, opts...))
}

type bookingServiceHandler struct {
	BookingServiceHandler
}

func (h *bookingServiceHandler) CreateBooking(ctx context.Context, in *CreateBookingMessage, out *CreateBookingResponse) error {
	return h.BookingServiceHandler.CreateBooking(ctx, in, out)
}

func (h *bookingServiceHandler) ConfirmBooking(ctx context.Context, in *ConfirmBookingMessage, out *ConfirmBookingResponse) error {
	return h.BookingServiceHandler.ConfirmBooking(ctx, in, out)
}

func (h *bookingServiceHandler) DeleteBooking(ctx context.Context, in *DeleteBookingMessage, out *DeleteBookingResponse) error {
	return h.BookingServiceHandler.DeleteBooking(ctx, in, out)
}

func (h *bookingServiceHandler) GetUserBookings(ctx context.Context, in *GetUserBookingsMessage, out *GetUserBookingsResponse) error {
	return h.BookingServiceHandler.GetUserBookings(ctx, in, out)
}

func (h *bookingServiceHandler) GetBooking(ctx context.Context, in *GetBookingMessage, out *GetBookingResponse) error {
	return h.BookingServiceHandler.GetBooking(ctx, in, out)
}

func (h *bookingServiceHandler) KillBookingsUser(ctx context.Context, in *KillBookingsUserMessage, out *KillBookingsUserResponse) error {
	return h.BookingServiceHandler.KillBookingsUser(ctx, in, out)
}

func (h *bookingServiceHandler) KillBookingsShow(ctx context.Context, in *KillBookingsShowMessage, out *KillBookingsShowResponse) error {
	return h.BookingServiceHandler.KillBookingsShow(ctx, in, out)
}
