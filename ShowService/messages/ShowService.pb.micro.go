// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ShowService.proto

package ShowService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ShowService service

type ShowService interface {
	CreateShow(ctx context.Context, in *CreateShowMessage, opts ...client.CallOption) (*CreateShowResponse, error)
	DeleteShow(ctx context.Context, in *DeleteShowMessage, opts ...client.CallOption) (*DeleteShowResponse, error)
	BlockSeats(ctx context.Context, in *BlockSeatMessage, opts ...client.CallOption) (*BlockSeatResponse, error)
	LockSeats(ctx context.Context, in *LockSeatMessage, opts ...client.CallOption) (*LockSeatResponse, error)
	FreeSeats(ctx context.Context, in *FreeSeatMessage, opts ...client.CallOption) (*FreeSeatResponse, error)
	VerifySeat(ctx context.Context, in *VerifySeatMessage, opts ...client.CallOption) (*VerifySeatResponse, error)
	KillShowsHall(ctx context.Context, in *KillShowsHallMessage, opts ...client.CallOption) (*KillShowsHallResponse, error)
	KillShowsMovie(ctx context.Context, in *KillShowsMovieMessage, opts ...client.CallOption) (*KillShowsMovieResponse, error)
	GetShows(ctx context.Context, in *GetShowsMessage, opts ...client.CallOption) (*GetShowsResponse, error)
	GetShow(ctx context.Context, in *GetShowMessage, opts ...client.CallOption) (*GetShowResponse, error)
}

type showService struct {
	c    client.Client
	name string
}

func NewShowService(name string, c client.Client) ShowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "showservice"
	}
	return &showService{
		c:    c,
		name: name,
	}
}

func (c *showService) CreateShow(ctx context.Context, in *CreateShowMessage, opts ...client.CallOption) (*CreateShowResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.CreateShow", in)
	out := new(CreateShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) DeleteShow(ctx context.Context, in *DeleteShowMessage, opts ...client.CallOption) (*DeleteShowResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.DeleteShow", in)
	out := new(DeleteShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) BlockSeats(ctx context.Context, in *BlockSeatMessage, opts ...client.CallOption) (*BlockSeatResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.BlockSeats", in)
	out := new(BlockSeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) LockSeats(ctx context.Context, in *LockSeatMessage, opts ...client.CallOption) (*LockSeatResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.LockSeats", in)
	out := new(LockSeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) FreeSeats(ctx context.Context, in *FreeSeatMessage, opts ...client.CallOption) (*FreeSeatResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.FreeSeats", in)
	out := new(FreeSeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) VerifySeat(ctx context.Context, in *VerifySeatMessage, opts ...client.CallOption) (*VerifySeatResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.VerifySeat", in)
	out := new(VerifySeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) KillShowsHall(ctx context.Context, in *KillShowsHallMessage, opts ...client.CallOption) (*KillShowsHallResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.KillShowsHall", in)
	out := new(KillShowsHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) KillShowsMovie(ctx context.Context, in *KillShowsMovieMessage, opts ...client.CallOption) (*KillShowsMovieResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.KillShowsMovie", in)
	out := new(KillShowsMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) GetShows(ctx context.Context, in *GetShowsMessage, opts ...client.CallOption) (*GetShowsResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.GetShows", in)
	out := new(GetShowsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) GetShow(ctx context.Context, in *GetShowMessage, opts ...client.CallOption) (*GetShowResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.GetShow", in)
	out := new(GetShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShowService service

type ShowServiceHandler interface {
	CreateShow(context.Context, *CreateShowMessage, *CreateShowResponse) error
	DeleteShow(context.Context, *DeleteShowMessage, *DeleteShowResponse) error
	BlockSeats(context.Context, *BlockSeatMessage, *BlockSeatResponse) error
	LockSeats(context.Context, *LockSeatMessage, *LockSeatResponse) error
	FreeSeats(context.Context, *FreeSeatMessage, *FreeSeatResponse) error
	VerifySeat(context.Context, *VerifySeatMessage, *VerifySeatResponse) error
	KillShowsHall(context.Context, *KillShowsHallMessage, *KillShowsHallResponse) error
	KillShowsMovie(context.Context, *KillShowsMovieMessage, *KillShowsMovieResponse) error
	GetShows(context.Context, *GetShowsMessage, *GetShowsResponse) error
	GetShow(context.Context, *GetShowMessage, *GetShowResponse) error
}

func RegisterShowServiceHandler(s server.Server, hdlr ShowServiceHandler, opts ...server.HandlerOption) error {
	type showService interface {
		CreateShow(ctx context.Context, in *CreateShowMessage, out *CreateShowResponse) error
		DeleteShow(ctx context.Context, in *DeleteShowMessage, out *DeleteShowResponse) error
		BlockSeats(ctx context.Context, in *BlockSeatMessage, out *BlockSeatResponse) error
		LockSeats(ctx context.Context, in *LockSeatMessage, out *LockSeatResponse) error
		FreeSeats(ctx context.Context, in *FreeSeatMessage, out *FreeSeatResponse) error
		VerifySeat(ctx context.Context, in *VerifySeatMessage, out *VerifySeatResponse) error
		KillShowsHall(ctx context.Context, in *KillShowsHallMessage, out *KillShowsHallResponse) error
		KillShowsMovie(ctx context.Context, in *KillShowsMovieMessage, out *KillShowsMovieResponse) error
		GetShows(ctx context.Context, in *GetShowsMessage, out *GetShowsResponse) error
		GetShow(ctx context.Context, in *GetShowMessage, out *GetShowResponse) error
	}
	type ShowService struct {
		showService
	}
	h := &showServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShowService{h}, opts...))
}

type showServiceHandler struct {
	ShowServiceHandler
}

func (h *showServiceHandler) CreateShow(ctx context.Context, in *CreateShowMessage, out *CreateShowResponse) error {
	return h.ShowServiceHandler.CreateShow(ctx, in, out)
}

func (h *showServiceHandler) DeleteShow(ctx context.Context, in *DeleteShowMessage, out *DeleteShowResponse) error {
	return h.ShowServiceHandler.DeleteShow(ctx, in, out)
}

func (h *showServiceHandler) BlockSeats(ctx context.Context, in *BlockSeatMessage, out *BlockSeatResponse) error {
	return h.ShowServiceHandler.BlockSeats(ctx, in, out)
}

func (h *showServiceHandler) LockSeats(ctx context.Context, in *LockSeatMessage, out *LockSeatResponse) error {
	return h.ShowServiceHandler.LockSeats(ctx, in, out)
}

func (h *showServiceHandler) FreeSeats(ctx context.Context, in *FreeSeatMessage, out *FreeSeatResponse) error {
	return h.ShowServiceHandler.FreeSeats(ctx, in, out)
}

func (h *showServiceHandler) VerifySeat(ctx context.Context, in *VerifySeatMessage, out *VerifySeatResponse) error {
	return h.ShowServiceHandler.VerifySeat(ctx, in, out)
}

func (h *showServiceHandler) KillShowsHall(ctx context.Context, in *KillShowsHallMessage, out *KillShowsHallResponse) error {
	return h.ShowServiceHandler.KillShowsHall(ctx, in, out)
}

func (h *showServiceHandler) KillShowsMovie(ctx context.Context, in *KillShowsMovieMessage, out *KillShowsMovieResponse) error {
	return h.ShowServiceHandler.KillShowsMovie(ctx, in, out)
}

func (h *showServiceHandler) GetShows(ctx context.Context, in *GetShowsMessage, out *GetShowsResponse) error {
	return h.ShowServiceHandler.GetShows(ctx, in, out)
}

func (h *showServiceHandler) GetShow(ctx context.Context, in *GetShowMessage, out *GetShowResponse) error {
	return h.ShowServiceHandler.GetShow(ctx, in, out)
}
