// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: HallService.proto

package HallService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HallService service

type HallService interface {
	CreateHall(ctx context.Context, in *CreateHallMessage, opts ...client.CallOption) (*CreateHallResponse, error)
	DeleteHall(ctx context.Context, in *DeleteHallMessage, opts ...client.CallOption) (*DeleteHallResponse, error)
	GetHall(ctx context.Context, in *GetHallMessage, opts ...client.CallOption) (*GetHallResponse, error)
	VerifySeat(ctx context.Context, in *VerifySeatMessage, opts ...client.CallOption) (*VerifySeatResponse, error)
}

type hallService struct {
	c    client.Client
	name string
}

func NewHallService(name string, c client.Client) HallService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "hallservice"
	}
	return &hallService{
		c:    c,
		name: name,
	}
}

func (c *hallService) CreateHall(ctx context.Context, in *CreateHallMessage, opts ...client.CallOption) (*CreateHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.CreateHall", in)
	out := new(CreateHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) DeleteHall(ctx context.Context, in *DeleteHallMessage, opts ...client.CallOption) (*DeleteHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.DeleteHall", in)
	out := new(DeleteHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) GetHall(ctx context.Context, in *GetHallMessage, opts ...client.CallOption) (*GetHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.GetHall", in)
	out := new(GetHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) VerifySeat(ctx context.Context, in *VerifySeatMessage, opts ...client.CallOption) (*VerifySeatResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.VerifySeat", in)
	out := new(VerifySeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HallService service

type HallServiceHandler interface {
	CreateHall(context.Context, *CreateHallMessage, *CreateHallResponse) error
	DeleteHall(context.Context, *DeleteHallMessage, *DeleteHallResponse) error
	GetHall(context.Context, *GetHallMessage, *GetHallResponse) error
	VerifySeat(context.Context, *VerifySeatMessage, *VerifySeatResponse) error
}

func RegisterHallServiceHandler(s server.Server, hdlr HallServiceHandler, opts ...server.HandlerOption) error {
	type hallService interface {
		CreateHall(ctx context.Context, in *CreateHallMessage, out *CreateHallResponse) error
		DeleteHall(ctx context.Context, in *DeleteHallMessage, out *DeleteHallResponse) error
		GetHall(ctx context.Context, in *GetHallMessage, out *GetHallResponse) error
		VerifySeat(ctx context.Context, in *VerifySeatMessage, out *VerifySeatResponse) error
	}
	type HallService struct {
		hallService
	}
	h := &hallServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HallService{h}, opts...))
}

type hallServiceHandler struct {
	HallServiceHandler
}

func (h *hallServiceHandler) CreateHall(ctx context.Context, in *CreateHallMessage, out *CreateHallResponse) error {
	return h.HallServiceHandler.CreateHall(ctx, in, out)
}

func (h *hallServiceHandler) DeleteHall(ctx context.Context, in *DeleteHallMessage, out *DeleteHallResponse) error {
	return h.HallServiceHandler.DeleteHall(ctx, in, out)
}

func (h *hallServiceHandler) GetHall(ctx context.Context, in *GetHallMessage, out *GetHallResponse) error {
	return h.HallServiceHandler.GetHall(ctx, in, out)
}

func (h *hallServiceHandler) VerifySeat(ctx context.Context, in *VerifySeatMessage, out *VerifySeatResponse) error {
	return h.HallServiceHandler.VerifySeat(ctx, in, out)
}
